Dos profesores. El profesor de teoría y el profesor de todo. Los estudiantes que revisan la teoría pueden elegir el que quieran, los estudiantes que revisan todo deben ser revisados por el profesor de todo.
Se te forma una cola de estudiantes. Entre uno y tres segundos llega un estudiante nuevo. El tiempo de revisión está entre dos y cuatro segundos. Los estudiantes pueden irse si se aburren de la cola.
La simulación de la revisión acabará cuando se hayan ido los estudiantes (sea por ser revisados o por aburrimiento). Antes de comenzar la práctica se pedirán los valores necesarios para la simulación.

Simulación gráfica
Según el cartulito que lleve el estudiante, vendrá a revisar teoría o vendrá a revisar todo.

Descifrando...
¿Qué son los estudiantes? Procesos. Tendré un generador de procesos.
El proceso principal se llama revision. revision crea profeteoria y profetodo. Después, cada cierto tiempo revision crea estudiantes de forma aleatoria.
Se implementa una cola de mensajes. Cada estudiante que quiera ir a revisión apunta su PID en esta C.M. Si profetodo coge un mensaje de todo o de teoría, el profe coge al estudiante. Si profeteoria coge un
mensaje de tipo teoría, coge al estudiante con dicho PID. El profe de teoría coge el más antiguo.
msgrcv(...,tipo,0);//Espero por el 0.
msgrcv(...,0,0);//El profe de teoría coge el mensaje más antiguo.
El profe de teoría le dice pasar al estudiante con una señal, el otro profe da otra señal para pasar. Por tanto, los estudiantes tendrán que estar preparados para ambas señales.
fifoteoria es la FIFO donde el estudiante deja que se ha ido. Si el profesor ve que ese alumno se ha ido en la FIFO, deja pasar a otro estudiante e ignora al que se ha ido.

El servidor gráfico
El servidor gráfico es un proceso. Este dibuja todo, no tenemos que preocuparnos de dibujar la pantalla. ¿De quién depende este? Este proceso lee mensajes de una cola de mensajes. 
Cada vez que yo quiera dibujar en pantalla, le debo mandar un mensaje al servidor gráfico.
ftok("./fichcola.txt", 18);//fichcola.txt es un fichero utilizado como referencia para la cola de mensajes. El servidor gráfico ha creado la cola.
Si quieres dibujarte, abres la cola y dejas el mensaje. ¿Qué información hay que escribir aquí? Esta:

struct tipo_elemento{
	long tipo; //obligatorio para la cola de mensajes
	int pid;
	//del proceso que se dibuja
	int donde; //ventana en la que se pinta, según definiciones siguientes
	int que;
	//Operación: PINTAR o BORRAR
	int cualidad; //Aspecto, según definiciones siguientes
	int cabeza; //Aspecto de la cabeza, número entre 0 y MAXCABEZAS-1
	int cuerpo; //Aspecto del cuerpo, número entre 0 y MAXCUERPOS-1
}; 

◦ VCOLALLEGAR. Representa la cola de llegada
◦ VFINREV. Representa la zona donde se dibujan los estudiantes que han revisado.
◦ VABURRIDO. Representa la zona donde se dibujan los estudiantes que se han ido.
◦ VCONTEORIA. Representa al estudiante revisando con el profesor de teoría.
◦ VCONTODO. Representa al estudiante revisando con el profesor de todo.

Puedo pintarme o borrarme de la cola.

Cualidad dice si eres tipo teoría o tipo todo.
Cabeza y cuerpo son para la estética del estudiante.

En el momento en que envíe a la cola, eso se pinta.

El servidor gráfico revisa si le caben las cosas en la pantalla antes. Si la resolución es correcta, envía la señal 10 al proceso que lo creó. Si la res. no es correcta, envía la señal 12 al proceso que lo
creó.

Voy a crear un proceso principal llamado revision. revision creará el servidor gráfico. El servidor gráfico responde con 10 (res. ok) o 12 (res. error). Si me contesta con la 10, me pongo a escribir mensajes
de tipo struct tipo_elemento. 

Al pintar revision, el servidor gráfico le manda la 10. Cada vez que pinte deberé esperar la 10, sino debo morir. Cuando revision no quiera pintar más, le manda la señal 12 al servidor gráfico.

El servidor gráfico usa ncurses.h, una librería. Es una librería que te permite dibujar texto, imágenes, cambiar el color... Esta linka -lncursesw.

-lm para cosenos, -lpthread para hilos. Que no se nos olvide nunca en el Makefile.

UTF-8 es mejor que ASCII, tiene más caracteres que ASCII. El servidor gráfico dibuja con UTF-8.
Busca en Google "ambulancia utf-8". Tendrás el código para dibujar una ambulancia. 

Nunca se preguntará nada de la codificación interna del servidor gráfico. Pero sí se pedirá cómo compilar el servidor gráfico. Nos dan el Makefile.  Simplemente haces make y lo tienes. Tienes que tener la 
librería instalada, para ello haces sudo apt install libncurses5-dev y sudo apt install libncurses5w y sudo apt install libncurses5 y sudo apt install libncurses5. POR REVISAR.

El servidor gráfico cuando arranca borra la cola de mensajes anterior y crea su nueva cola de mensajes.

Un pause se respeta si llega la señal, si llega una señal con un sleep no se respeta.

reset es un clear más potente, resetea la terminal por completo.

El servidor gráfico te manda las señales 10 y 12, si no estás preparado te mata.

El servidor gráfico es casi un printf, no entiende lo que le pidas.

Próximo día: creamos varios alumnos y que vayan pasando.
